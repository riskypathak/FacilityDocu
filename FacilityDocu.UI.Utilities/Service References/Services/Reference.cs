//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FacilityDocu.UI.Utilities.Services {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IFacilityDocuService")]
    public interface IFacilityDocuService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/Login", ReplyAction="http://tempuri.org/IFacilityDocuService/LoginResponse")]
        bool Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/Login", ReplyAction="http://tempuri.org/IFacilityDocuService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/IsSync", ReplyAction="http://tempuri.org/IFacilityDocuService/IsSyncResponse")]
        System.Collections.Generic.Dictionary<int, string> IsSync(int[] inputProjects, bool fromTablet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/IsSync", ReplyAction="http://tempuri.org/IFacilityDocuService/IsSyncResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> IsSyncAsync(int[] inputProjects, bool fromTablet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/SyncRequiredForUpdatedProjects", ReplyAction="http://tempuri.org/IFacilityDocuService/SyncRequiredForUpdatedProjectsResponse")]
        System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> SyncRequiredForUpdatedProjects(System.Collections.Generic.Dictionary<int, FacilityDocu.DTO.ActionDTO[]> projectActionDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/SyncRequiredForUpdatedProjects", ReplyAction="http://tempuri.org/IFacilityDocuService/SyncRequiredForUpdatedProjectsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>>> SyncRequiredForUpdatedProjectsAsync(System.Collections.Generic.Dictionary<int, FacilityDocu.DTO.ActionDTO[]> projectActionDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/GetProjectDetails", ReplyAction="http://tempuri.org/IFacilityDocuService/GetProjectDetailsResponse")]
        FacilityDocu.DTO.ProjectDTO GetProjectDetails(int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/GetProjectDetails", ReplyAction="http://tempuri.org/IFacilityDocuService/GetProjectDetailsResponse")]
        System.Threading.Tasks.Task<FacilityDocu.DTO.ProjectDTO> GetProjectDetailsAsync(int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/GetProjectActions", ReplyAction="http://tempuri.org/IFacilityDocuService/GetProjectActionsResponse")]
        FacilityDocu.DTO.ActionDTO[] GetProjectActions(int projectID, int[] actionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/GetProjectActions", ReplyAction="http://tempuri.org/IFacilityDocuService/GetProjectActionsResponse")]
        System.Threading.Tasks.Task<FacilityDocu.DTO.ActionDTO[]> GetProjectActionsAsync(int projectID, int[] actionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/UpdateProject", ReplyAction="http://tempuri.org/IFacilityDocuService/UpdateProjectResponse")]
        FacilityDocu.DTO.ProjectDTO UpdateProject(FacilityDocu.DTO.ProjectDTO projectDTO, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/UpdateProject", ReplyAction="http://tempuri.org/IFacilityDocuService/UpdateProjectResponse")]
        System.Threading.Tasks.Task<FacilityDocu.DTO.ProjectDTO> UpdateProjectAsync(FacilityDocu.DTO.ProjectDTO projectDTO, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/UpdateActionImages", ReplyAction="http://tempuri.org/IFacilityDocuService/UpdateActionImagesResponse")]
        System.Collections.Generic.Dictionary<string, int> UpdateActionImages(FacilityDocu.DTO.ActionDTO action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/UpdateActionImages", ReplyAction="http://tempuri.org/IFacilityDocuService/UpdateActionImagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> UpdateActionImagesAsync(FacilityDocu.DTO.ActionDTO action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/UpdateActionAttachments", ReplyAction="http://tempuri.org/IFacilityDocuService/UpdateActionAttachmentsResponse")]
        void UpdateActionAttachments(FacilityDocu.DTO.ActionDTO action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/UpdateActionAttachments", ReplyAction="http://tempuri.org/IFacilityDocuService/UpdateActionAttachmentsResponse")]
        System.Threading.Tasks.Task UpdateActionAttachmentsAsync(FacilityDocu.DTO.ActionDTO action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/GetTools", ReplyAction="http://tempuri.org/IFacilityDocuService/GetToolsResponse")]
        FacilityDocu.DTO.ToolDTO[] GetTools();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/GetTools", ReplyAction="http://tempuri.org/IFacilityDocuService/GetToolsResponse")]
        System.Threading.Tasks.Task<FacilityDocu.DTO.ToolDTO[]> GetToolsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/CreateTemplate", ReplyAction="http://tempuri.org/IFacilityDocuService/CreateTemplateResponse")]
        void CreateTemplate(FacilityDocu.DTO.ProjectDTO projectDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacilityDocuService/CreateTemplate", ReplyAction="http://tempuri.org/IFacilityDocuService/CreateTemplateResponse")]
        System.Threading.Tasks.Task CreateTemplateAsync(FacilityDocu.DTO.ProjectDTO projectDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFacilityDocuServiceChannel : FacilityDocu.UI.Utilities.Services.IFacilityDocuService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacilityDocuServiceClient : System.ServiceModel.ClientBase<FacilityDocu.UI.Utilities.Services.IFacilityDocuService>, FacilityDocu.UI.Utilities.Services.IFacilityDocuService {
        
        public FacilityDocuServiceClient() {
        }
        
        public FacilityDocuServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacilityDocuServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacilityDocuServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacilityDocuServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public System.Collections.Generic.Dictionary<int, string> IsSync(int[] inputProjects, bool fromTablet) {
            return base.Channel.IsSync(inputProjects, fromTablet);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> IsSyncAsync(int[] inputProjects, bool fromTablet) {
            return base.Channel.IsSyncAsync(inputProjects, fromTablet);
        }
        
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> SyncRequiredForUpdatedProjects(System.Collections.Generic.Dictionary<int, FacilityDocu.DTO.ActionDTO[]> projectActionDTOs) {
            return base.Channel.SyncRequiredForUpdatedProjects(projectActionDTOs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>>> SyncRequiredForUpdatedProjectsAsync(System.Collections.Generic.Dictionary<int, FacilityDocu.DTO.ActionDTO[]> projectActionDTOs) {
            return base.Channel.SyncRequiredForUpdatedProjectsAsync(projectActionDTOs);
        }
        
        public FacilityDocu.DTO.ProjectDTO GetProjectDetails(int projectID) {
            return base.Channel.GetProjectDetails(projectID);
        }
        
        public System.Threading.Tasks.Task<FacilityDocu.DTO.ProjectDTO> GetProjectDetailsAsync(int projectID) {
            return base.Channel.GetProjectDetailsAsync(projectID);
        }
        
        public FacilityDocu.DTO.ActionDTO[] GetProjectActions(int projectID, int[] actionIds) {
            return base.Channel.GetProjectActions(projectID, actionIds);
        }
        
        public System.Threading.Tasks.Task<FacilityDocu.DTO.ActionDTO[]> GetProjectActionsAsync(int projectID, int[] actionIds) {
            return base.Channel.GetProjectActionsAsync(projectID, actionIds);
        }
        
        public FacilityDocu.DTO.ProjectDTO UpdateProject(FacilityDocu.DTO.ProjectDTO projectDTO, string userName) {
            return base.Channel.UpdateProject(projectDTO, userName);
        }
        
        public System.Threading.Tasks.Task<FacilityDocu.DTO.ProjectDTO> UpdateProjectAsync(FacilityDocu.DTO.ProjectDTO projectDTO, string userName) {
            return base.Channel.UpdateProjectAsync(projectDTO, userName);
        }
        
        public System.Collections.Generic.Dictionary<string, int> UpdateActionImages(FacilityDocu.DTO.ActionDTO action) {
            return base.Channel.UpdateActionImages(action);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> UpdateActionImagesAsync(FacilityDocu.DTO.ActionDTO action) {
            return base.Channel.UpdateActionImagesAsync(action);
        }
        
        public void UpdateActionAttachments(FacilityDocu.DTO.ActionDTO action) {
            base.Channel.UpdateActionAttachments(action);
        }
        
        public System.Threading.Tasks.Task UpdateActionAttachmentsAsync(FacilityDocu.DTO.ActionDTO action) {
            return base.Channel.UpdateActionAttachmentsAsync(action);
        }
        
        public FacilityDocu.DTO.ToolDTO[] GetTools() {
            return base.Channel.GetTools();
        }
        
        public System.Threading.Tasks.Task<FacilityDocu.DTO.ToolDTO[]> GetToolsAsync() {
            return base.Channel.GetToolsAsync();
        }
        
        public void CreateTemplate(FacilityDocu.DTO.ProjectDTO projectDTO) {
            base.Channel.CreateTemplate(projectDTO);
        }
        
        public System.Threading.Tasks.Task CreateTemplateAsync(FacilityDocu.DTO.ProjectDTO projectDTO) {
            return base.Channel.CreateTemplateAsync(projectDTO);
        }
    }
}
